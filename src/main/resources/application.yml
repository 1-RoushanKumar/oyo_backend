server:
  forward-headers-strategy: framework

spring:
  profiles:
    active: ${ENV:dev}
  mail:
    host: smtp.gmail.com
    port: 587
    username: ndtforwork@gmail.com
    password: ixlfnhqlmfmcoufn
    protocol: smtp
    tls: true
    properties.mail.smtp:
      auth: true
      port: 25
      starttls.enable: true
      ssl.trust: smtp.gmail.com
  jpa:
    database: MYSQL
    show-sql: true
    hibernate:
      ddl-auto: update
    database-platform: org.hibernate.dialect.MySQLDialect
    properties:
      hibernate:
        format_sql: true
#    defer-datasource-initialization: true
  security:
    oauth2:
      client:
        registration:
          google:
            clientId: 430482886897-aigo5f3p4lfli4kg3psjj1o0n3olbsc4.apps.googleusercontent.com
            clientSecret: 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
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - email
              - profile
          facebook:
            clientId: 121189305185277
            clientSecret: 42ffe5aa7379e8326387e0fe16f34132
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - email
              - public_profile
          github:
            clientId: d3e47fc2ddd966fa4352
            clientSecret: 3bc0f6b8332f93076354c2a5bada2f5a05aea60d
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - user:email
              - read:user
        provider:
          facebook:
            authorizationUri: https://www.facebook.com/v3.0/dialog/oauth
            tokenUri: https://graph.facebook.com/v3.0/oauth/access_token
            userInfoUri: https://graph.facebook.com/v3.0/me?fields=id,first_name,middle_name,last_name,name,email,verified,is_verified,picture.width(250).height(250)
  datasource:
    url: jdbc:mysql://localhost:3306/oyo?createDatabaseIfNotExist=true
    username: root
    password: baohuy
    driverClassName: com.mysql.cj.jdbc.Driver
  sql:
    init:
      platform: mysql
#      mode: always
#      data-locations:
#      - classpath:/initData/sql/init_data_accom_categories.sql
#      - classpath:/initData/sql/init_data_province.sql
#      - classpath:/initData/sql/init_data_district.sql
#      - classpath:/initData/sql/init_data_ward.sql
  freemarker:
    template-loader-path: classpath:/templates/
    suffix: ftl
    content-type: text/html
    charset: UTF-8
    cache: true
    hiddenmethod:
      filter:
        enabled: true
  servlet:
    multipart:
      max-file-size: 3MB
      max-request-size: 3MB
  mvc:
    problemdetails:
      enabled: true


logging:
  level:
    org:
      hibernate:
        jdbc:
          

      springframework:
        security: DEBUG
jwt:
  secret: qOevUET/5tgg91Awfv2LKufDRzfSeCcDobw3LlV+YoggfwJYyc6mCrBNd4nIDus7sBYB4Bs

mascara:
  openapi:
    dev-url: http://localhost:8080

token:
  expired: 1

url:
  client: http://localhost:3000

cloudinary:
  name: dyv5zrsgj
  api_key: 725286843731793
  api_secret: vlXQhzYH_ngfJqQHo5As0LAC0gc
  secure_mode: true

storage:
  location: uploads/images

avatar:
  default: https://res.cloudinary.com/dyv5zrsgj/image/upload/v1698163058/oyo_booking/nqxq12lb5gazvph6rwf7.png

app:
  auth:
    tokenSecret: 04ca023b39512e46d0c2cf4b48d5aac61d34302994c87ed4eff225dcf3b0a218739f3897051a057f9b846a69ea2927a587044164b7bae5e1306219d50b588cb1
    tokenExpirationMsec: 864000000
  cors:
    allowedOrigins: http://localhost:3000,http://localhost:8080
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:5173/oauth2/redirect

